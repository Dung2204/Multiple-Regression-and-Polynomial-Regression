import streamlit as st
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
    return pd.read_csv(url)

df = load_data()

# Preprocess data
def preprocess_data(df):
    df = df[['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']].dropna()
    X = df.drop(columns=['Survived'])
    y = df['Survived']
    return X, y

X, y = preprocess_data(df)

# User input for data split
st.sidebar.header("T√πy ch·ªânh t·ª∑ l·ªá d·ªØ li·ªáu")
train_size = st.sidebar.slider("T·∫≠p train (%)", 50, 80, 70)
valid_size = st.sidebar.slider("T·∫≠p valid (%)", 10, 30, 15)
test_size = 100 - train_size - valid_size

st.sidebar.write(f"Train: {train_size}%  |  Valid: {valid_size}%  |  Test: {test_size}%")

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=(valid_size+test_size)/100, random_state=42)
X_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, test_size=test_size/(valid_size+test_size), random_state=42)

# User selects regression type
regression_type = st.sidebar.radio("Ch·ªçn lo·∫°i h·ªìi quy", ('Multiple Regression', 'Polynomial Regression'))
degree = st.sidebar.slider("B·∫≠c c·ªßa h·ªìi quy ƒëa th·ª©c", 2, 5, 2) if regression_type == 'Polynomial Regression' else None

# Kh√°i ni·ªám v·ªÅ h·ªìi quy
st.write("## Kh√°i ni·ªám v·ªÅ h·ªìi quy")

# Multiple Regression information
if regression_type == 'Multiple Regression':
    with st.expander("H·ªìi quy tuy·∫øn t√≠nh b·ªôi (Multiple Regression)"):
        st.write("H·ªìi quy tuy·∫øn t√≠nh b·ªôi l√† m√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh m·ªü r·ªông cho nhi·ªÅu bi·∫øn ƒë·ªôc l·∫≠p. C√¥ng th·ª©c t·ªïng qu√°t:")
        st.latex(r"y = \beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_nx_n + \epsilon")
        st.write("Trong ƒë√≥, Œ≤0 l√† h·∫±ng s·ªë, Œ≤1 ƒë·∫øn Œ≤n l√† h·ªá s·ªë h·ªìi quy, x1 ƒë·∫øn xn l√† c√°c bi·∫øn ƒë·ªôc l·∫≠p.")
        
        # Visualization: Scatter Plot & Regression Line
        st.write("### Bi·ªÉu ƒë·ªì h·ªìi quy tuy·∫øn t√≠nh b·ªôi")
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.regplot(x=X['Age'], y=y, ax=ax, scatter_kws={'color': 'blue'}, line_kws={'color': 'red'})
        ax.set_title("Bi·ªÉu ƒë·ªì h·ªìi quy tuy·∫øn t√≠nh b·ªôi gi·ªØa Age v√† Survived")
        ax.set_xlabel("Age")
        ax.set_ylabel("Survived")
        st.pyplot(fig)
        
        st.write("### Gi·∫£i th√≠ch:")
        st.write("Bi·ªÉu ƒë·ªì tr√™n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa bi·∫øn 'Age' v√† 'Survived'. ƒê∆∞·ªùng h·ªìi quy ƒë·ªè l√† k·∫øt qu·∫£ c·ªßa m√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh b·ªôi. M·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn ƒë·ªôc l·∫≠p s·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t∆∞∆°ng t·ª±.")

# Polynomial Regression information
if regression_type == 'Polynomial Regression':
    with st.expander("H·ªìi quy ƒëa th·ª©c (Polynomial Regression)"):
        st.write("H·ªìi quy ƒëa th·ª©c l√† m·ªôt d·∫°ng m·ªü r·ªông c·ªßa h·ªìi quy tuy·∫øn t√≠nh, trong ƒë√≥ bi·∫øn ƒë·ªôc l·∫≠p c√≥ th·ªÉ c√≥ b·∫≠c cao h∆°n 1 ƒë·ªÉ m√¥ h√¨nh h√≥a quan h·ªá phi tuy·∫øn.")
        st.latex(r"y = \beta_0 + \beta_1x + \beta_2x^2 + \beta_3x^3 + ... + \beta_nx^n + \epsilon")
        st.write("B·∫≠c c·ªßa m√¥ h√¨nh h·ªìi quy c√†ng cao, kh·∫£ nƒÉng m√¥ h√¨nh h√≥a m·ªëi quan h·ªá phi tuy·∫øn c√†ng t·ªët, nh∆∞ng c√≥ th·ªÉ d·ªÖ b·ªã overfitting.")
        
        # Visualization: Polynomial Regression Curve
        st.write("### Bi·ªÉu ƒë·ªì h·ªìi quy ƒëa th·ª©c")
        poly = PolynomialFeatures(degree=degree)
        X_poly = poly.fit_transform(X[['Age']])
        
        # Train the polynomial regression model
        poly_regressor = LinearRegression()
        poly_regressor.fit(X_poly, y)
        
        # Create predictions for plotting
        X_range = np.linspace(X['Age'].min(), X['Age'].max(), 100).reshape(-1, 1)
        X_range_poly = poly.transform(X_range)
        y_range_pred = poly_regressor.predict(X_range_poly)
        
        # Plot the polynomial regression
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.scatter(X['Age'], y, color='blue', label='D·ªØ li·ªáu th·∫≠t')
        ax.plot(X_range, y_range_pred, color='red', label=f"ƒê∆∞·ªùng h·ªìi quy b·∫≠c {degree}")
        ax.set_title(f"Bi·ªÉu ƒë·ªì h·ªìi quy ƒëa th·ª©c b·∫≠c {degree} gi·ªØa Age v√† Survived")
        ax.set_xlabel("Age")
        ax.set_ylabel("Survived")
        ax.legend()
        st.pyplot(fig)
        
        st.write(f"### Gi·∫£i th√≠ch:")
        st.write(f"Bi·ªÉu ƒë·ªì tr√™n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa 'Age' v√† 'Survived'. ƒê∆∞·ªùng cong ƒë·ªè l√† m√¥ h√¨nh h·ªìi quy ƒëa th·ª©c b·∫≠c {degree}. V·ªõi h·ªìi quy ƒëa th·ª©c, ƒë∆∞·ªùng cong c√≥ th·ªÉ u·ªën l∆∞·ª£n ƒë·ªÉ ph·∫£n √°nh m·ªëi quan h·ªá phi tuy·∫øn gi·ªØa c√°c bi·∫øn.")



# MLFlow tracking
mlflow.set_experiment("Titanic Survival Prediction")
with mlflow.start_run():
    if regression_type == 'Multiple Regression':
        model = Pipeline([
            ('scaler', StandardScaler()),
            ('regressor', LinearRegression())
        ])
    else:
        model = Pipeline([
            ('scaler', StandardScaler()),
            ('poly', PolynomialFeatures(degree=degree)),
            ('regressor', LinearRegression())
        ])
    
    # Cross-validation
    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='r2')
    mlflow.log_param("Model Type", regression_type)
    if degree:
        mlflow.log_param("Polynomial Degree", degree)
    mlflow.log_metric("Cross-Validation R2", scores.mean())
    
    # Train final model
    model.fit(X_train, y_train)
    # mlflow.sklearn.log_model(model, "Titanic_Model")
    
    
    # Evaluate
    train_score = model.score(X_train, y_train)
    valid_score = model.score(X_valid, y_valid)
    test_score = model.score(X_test, y_test)
    
    mlflow.log_metric("Train R2", train_score)
    mlflow.log_metric("Valid R2", valid_score)
    mlflow.log_metric("Test R2", test_score)
    
    # Visualization
    st.write(f"### K·∫øt qu·∫£ m√¥ h√¨nh {regression_type}")
    st.write(f"- Train R¬≤: {train_score:.4f}")
    st.write(f"- Valid R¬≤: {valid_score:.4f}")
    st.write(f"- Test R¬≤: {test_score:.4f}")


    data_selection = st.selectbox("Ch·ªçn d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch:", ["Train", "Valid", "Test"])
    # C·∫≠p nh·∫≠t d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    if data_selection == "Train":
        X_data = X_train
        y_data = y_train
    elif data_selection == "Valid":
        X_data = X_valid
        y_data = y_valid
    else:
        X_data = X_test
        y_data = y_test

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ch·ªçn
    st.write(f"D·ªØ li·ªáu hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng: {data_selection}")
    st.write(f"S·ªë l∆∞·ª£ng d·ªØ li·ªáu: {len(y_data)}")

    # T·∫°o bi·ªÉu ƒë·ªì cho d·ªØ li·ªáu ƒë√£ ch·ªçn
    fig, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 24))  # S·∫Øp x·∫øp theo chi·ªÅu d·ªçc

    # Bi·ªÉu ƒë·ªì ph√¢n b·ªë c·ªßa d·ªØ li·ªáu (s·ª≠ d·ª•ng y_data)
    sns.histplot(y_data, bins=10, kde=True, ax=ax[0])
    ax[0].set_title(f"Ph√¢n b·ªë c·ªßa d·ªØ li·ªáu {data_selection}", fontsize=25)
    ax[0].set_xlabel("Survived", fontsize=18)
    ax[0].set_ylabel("S·ªë l∆∞·ª£ng", fontsize=18)

    # Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n vs th·ª±c t·∫ø
    sns.scatterplot(x=y_data, y=model.predict(X_data), ax=ax[1])
    ax[1].set_title(f"D·ª± ƒëo√°n vs. Th·ª±c t·∫ø ({data_selection})", fontsize=25)
    ax[1].set_xlabel("Gi√° tr·ªã th·ª±c", fontsize=18)
    ax[1].set_ylabel("Gi√° tr·ªã d·ª± ƒëo√°n", fontsize=18)

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi d·ªØ li·ªáu theo c√°c bi·∫øn (Pclass, Age, Fare) cho t·∫≠p d·ªØ li·ªáu ƒë√£ ch·ªçn
    sns.boxplot(data=df[['Pclass', 'Age', 'Fare']], ax=ax[2])
    ax[2].set_title(f"Ph√¢n ph·ªëi d·ªØ li·ªáu theo c√°c bi·∫øn ({data_selection})", fontsize=25)

    # Ch·ªâ g·ªçi `st.pyplot()` m·ªôt l·∫ßn duy nh·∫•t
    st.pyplot(fig)

    # Ph·∫ßn gi·∫£i th√≠ch
    st.write("### Gi·∫£i th√≠ch:")
    st.write("üîπ **Ph√¢n b·ªë d·ªØ li·ªáu:** Bi·ªÉu ƒë·ªì tr√™n th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa d·ªØ li·ªáu ƒë√£ ch·ªçn theo bi·∫øn `Survived`. N√≥ gi√∫p quan s√°t s·ªë l∆∞·ª£ng h√†nh kh√°ch s·ªëng s√≥t (1) v√† kh√¥ng s·ªëng s√≥t (0). ƒê∆∞·ªùng cong KDE cho th·∫•y m·∫≠t ƒë·ªô ph√¢n b·ªë c·ªßa d·ªØ li·ªáu.")
    st.write("üîπ **D·ª± ƒëo√°n vs. Th·ª±c t·∫ø:** Bi·ªÉu ƒë·ªì so s√°nh gi√° tr·ªã d·ª± ƒëo√°n c·ªßa m√¥ h√¨nh v·ªõi gi√° tr·ªã th·ª±c t·∫ø. N·∫øu c√°c ƒëi·ªÉm n·∫±m tr√™n ƒë∆∞·ªùng ch√©o, m√¥ h√¨nh d·ª± ƒëo√°n ch√≠nh x√°c. N·∫øu ph√¢n t√°n qu√° nhi·ªÅu, m√¥ h√¨nh c√≥ th·ªÉ ch∆∞a ph√π h·ª£p.")
    st.write("üîπ **Ph√¢n ph·ªëi d·ªØ li·ªáu:** Bi·ªÉu ƒë·ªì tr√™n th·ªÉ hi·ªán ph√¢n b·ªë gi√° tr·ªã c·ªßa c√°c bi·∫øn nh∆∞ Pclass, Age, Fare.")


    if regression_type == 'Multiple Regression':
        st.write("### K·∫øt qu·∫£ m√¥ h√¨nh H·ªìi quy tuy·∫øn t√≠nh b·ªôi")
        
        # Train the model
        model = Pipeline([
            ('scaler', StandardScaler()),
            ('regressor', LinearRegression())
        ])
        
        # Fit the model with the training data
        model.fit(X_train, y_train)
        
        # Predict on train, validation, and test data
        y_train_pred = model.predict(X_train)
        y_valid_pred = model.predict(X_valid)
        y_test_pred = model.predict(X_test)
        
        # Plot the Linear Regression (for Train, Valid, Test)
        fig, ax = plt.subplots(figsize=(8, 6))
        
        # Plot train, valid, and test predictions
        ax.scatter(y_train, y_train_pred, color='blue', label='Train Data', alpha=0.6)
        ax.scatter(y_valid, y_valid_pred, color='green', label='Validation Data', alpha=0.6)
        ax.scatter(y_test, y_test_pred, color='red', label='Test Data', alpha=0.6)
        
        # Plot regression line
        ax.plot([0, 1], [0, 1], linestyle='--', color='black', label="Perfect Prediction Line")
        
        ax.set_title("H·ªìi quy tuy·∫øn t√≠nh b·ªôi: D·ª± ƒëo√°n vs. Th·ª±c t·∫ø (Train, Valid, Test)", fontsize=16)
        ax.set_xlabel("Gi√° tr·ªã th·ª±c t·∫ø", fontsize=14)
        ax.set_ylabel("Gi√° tr·ªã d·ª± ƒëo√°n", fontsize=14)
        ax.legend()
        
        st.pyplot(fig)
        
        # Explanation
        st.write("### Gi·∫£i th√≠ch:")
        st.write("üîπ **D·ªØ li·ªáu Train (Xanh D∆∞∆°ng)**: D·ª± ƒëo√°n tr√™n t·∫≠p hu·∫•n luy·ªán.")
        st.write("üîπ **D·ªØ li·ªáu Valid (Xanh L√°)**: D·ª± ƒëo√°n tr√™n t·∫≠p ki·ªÉm tra (t·∫≠p valid).")
        st.write("üîπ **D·ªØ li·ªáu Test (ƒê·ªè)**: D·ª± ƒëo√°n tr√™n t·∫≠p ki·ªÉm tra (t·∫≠p test).")
        st.write("üîπ **ƒê∆∞·ªùng Ch·∫•m ƒêen**: ƒê∆∞·ªùng h·ªìi quy l√Ω t∆∞·ªüng, m√¥ t·∫£ m·ªëi quan h·ªá gi·ªØa gi√° tr·ªã th·ª±c t·∫ø v√† gi√° tr·ªã d·ª± ƒëo√°n.")
        st.write("üîπ Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa gi√° tr·ªã th·ª±c t·∫ø v√† gi√° tr·ªã d·ª± ƒëo√°n tr√™n c√°c t·∫≠p train, valid, v√† test. N·∫øu c√°c ƒëi·ªÉm d·ªØ li·ªáu g·∫ßn v·ªõi ƒë∆∞·ªùng ch·∫•m ƒëen, m√¥ h√¨nh d·ª± ƒëo√°n ch√≠nh x√°c.")

    

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ c·ªßa m√¥ h√¨nh Polynomial Regression
    if regression_type == 'Polynomial Regression':
        st.subheader(f"K·∫øt qu·∫£ h·ªìi quy ƒëa th·ª©c b·∫≠c {degree}")

        # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
        X_train, X_test, y_train, y_test = train_test_split(X[['Age']], y, test_size=0.2, random_state=42)
        
        # T·∫°o ƒë·∫∑c tr∆∞ng ƒëa th·ª©c
        poly = PolynomialFeatures(degree=degree)
        X_train_poly = poly.fit_transform(X_train)
        X_test_poly = poly.transform(X_test)

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        poly_regressor = LinearRegression()
        poly_regressor.fit(X_train_poly, y_train)

        # D·ª± ƒëo√°n tr√™n t·∫≠p ki·ªÉm tra
        y_pred = poly_regressor.predict(X_test_poly)

        # T√≠nh to√°n l·ªói RMSE
        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        st.write(f"üîπ **L·ªói RMSE tr√™n t·∫≠p ki·ªÉm tra:** {rmse:.4f}")

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì th·ª±c t·∫ø vs. d·ª± ƒëo√°n
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.scatter(X_test, y_test, color='blue', label='Th·ª±c t·∫ø', alpha=0.6)
        ax.scatter(X_test, y_pred, color='red', label='D·ª± ƒëo√°n', alpha=0.6)
        
        # V·∫Ω ƒë∆∞·ªùng h·ªìi quy ƒëa th·ª©c
        X_range = np.linspace(X['Age'].min(), X['Age'].max(), 100).reshape(-1, 1)
        X_range_poly = poly.transform(X_range)
        y_range_pred = poly_regressor.predict(X_range_poly)
        ax.plot(X_range, y_range_pred, color='green', label=f"ƒê∆∞·ªùng h·ªìi quy b·∫≠c {degree}", linewidth=2)

        ax.set_title(f"H·ªìi quy ƒëa th·ª©c b·∫≠c {degree}: D·ª± ƒëo√°n vs. Th·ª±c t·∫ø")
        ax.set_xlabel("Age")
        ax.set_ylabel("Survived")
        ax.legend()
        st.pyplot(fig)

        st.write("üìå **Gi·∫£i th√≠ch:**")
        st.write(f"üîπ **ƒê∆∞·ªùng m√†u xanh**: l√† gi√° tr·ªã th·ª±c t·∫ø t·ª´ t·∫≠p ki·ªÉm tra.")
        st.write(f"üîπ **ƒê∆∞·ªùng m√†u ƒë·ªè**: l√† gi√° tr·ªã m√¥ h√¨nh d·ª± ƒëo√°n.")
        st.write(f"üîπ **ƒê∆∞·ªùng m√†u xanh l√°**: l√† ƒë∆∞·ªùng h·ªìi quy ƒëa th·ª©c b·∫≠c {degree} kh·ªõp v·ªõi d·ªØ li·ªáu.")




# Prediction demo
st.sidebar.subheader("D·ª± ƒëo√°n th·ª≠ nghi·ªám")
input_data = np.array([
    st.sidebar.number_input("Pclass", 1, 3, 2),
    st.sidebar.number_input("Age", 1, 100, 30),
    st.sidebar.number_input("SibSp", 0, 10, 1),
    st.sidebar.number_input("Parch", 0, 10, 0),
    st.sidebar.number_input("Fare", 0.0, 500.0, 50.0)
]).reshape(1, -1)

if st.sidebar.button("D·ª± ƒëo√°n s·ªëng s√≥t"):
    prediction = model.predict(input_data)
    st.sidebar.write(f"D·ª± ƒëo√°n s·ªëng s√≥t: {'C√≥' if prediction[0] > 0.5 else 'Kh√¥ng'}")





# # # cd "C:\Users\Dell\OneDrive\Pictures\Documents\Code\python\OpenCV\HMVPYTHON\BaiThucHanh2"
# streamlit run app.py





